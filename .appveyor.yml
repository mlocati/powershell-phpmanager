image: Visual Studio 2017

branches:
  only:
    - master

version: "Build {build}"

skip_commits:
  files:
    - images/
    - src/
    - .gitignore
    - LICENSE
    - README.md

environment:
  PsgKey:
    secure: tlhLuUS6x8FcP159+X/EIBDlj9m+u5KCTTuqwzsiNHlPX6K4AolpaZcfAP4ClOdB
  matrix:
    - TEST_NANOSERVER: no
    - TEST_NANOSERVER: yes

cache:
  - test\download-cache -> .appveyor.yml
  - '%ProgramFiles%\WindowsPowerShell\Modules\VcRedist -> .appveyor.yml'
  - '%ProgramFiles%\WindowsPowerShell\Modules\PSScriptAnalyzer -> .appveyor.yml'
  - '%ProgramFiles%\WindowsPowerShell\Modules\Pester -> .appveyor.yml'

build: off

install:
  - ps: |
      if ($Env:TEST_NANOSERVER -ne 'yes') {
        .\test\setup.ps1
      } else {
        if (-Not(Test-Path -LiteralPath .\test\docker-build)) {
          New-Item -ItemType Directory -Path .\test\docker-build | Out-Null
        }
        Copy-Item -LiteralPath "$($Env:SystemRoot)\System32\vcruntime140.dll" -Destination .\test\docker-build\
        Copy-Item -LiteralPath .\test\setup.ps1 -Destination .\test\docker-build\
        Copy-Item -LiteralPath .\test\Nanoserver.Dockerfile -Destination .\test\docker-build\Dockerfile
        docker build --rm --force-rm --tag nanoserver/phpmanager .\test\docker-build\
        Remove-Item -LiteralPath .\test\docker-build -Recurse
      }

test_script:
  - ps: |
      if ($Env:TEST_NANOSERVER -ne 'yes') {
        $pesterResult = .\test\pester.ps1
        $failCount = $pesterResult.FailedCount
      } else {
        $volume="$($Env:APPVEYOR_BUILD_FOLDER):C:\App"
        docker run --rm --volume $volume --workdir C:\App nanoserver/phpmanager powershell.exe '$pesterResult=.\test\pester.ps1; exit $pesterResult.FailedCount'
        $failCount = $LASTEXITCODE
      }
      (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path -LiteralPath .\TestsResults.xml))
      if ($failCount -ne 0) {
        throw "$failCount tests failed!"
      }

deploy_script:
  - ps: |
      if ($Env:TEST_NANOSERVER -ne 'yes' -and $true -eq $Env:APPVEYOR_REPO_TAG -and $Env:APPVEYOR_REPO_TAG_NAME -match '^\d+\.\d+\.\d+$') {
        $newVersion = $Env:APPVEYOR_REPO_TAG_NAME + '.' + $Env:APPVEYOR_BUILD_NUMBER
        Write-Host "Publishing new version: $newVersion"
        $releaseNotes = ''
        $tags = @(& git tag --list --sort=-version:refname)
        if ($tags.Count -lt 2) {
          Write-Host 'Less than 2 tags found: empty release notes'
        } else {
          $thisTagIndex = [array]::IndexOf($tags, $Env:APPVEYOR_REPO_TAG_NAME)
          if ($thisTagIndex -lt 0) {
            Write-Host 'Unable to find the index of the current tag: empty release notes'
          }
          $previousTag = ''
          for ($tagIndex = $thisTagIndex + 1; $tagIndex -lt $tags.Count; $tagIndex++) {
            if ($tags[$tagIndex] -match '^\d+\.\d+\.\d+$') {
              $previousTag = $tags[$tagIndex]
              break
            }
          }
          if ($previousTag -eq '') {
            Write-Host 'Unable to find the previously published tag: empty release notes'
          } else {
            $rawCommitMessages = @(& git log --format='- %s' --no-merges --reverse ("$previousTag..." + $Env:APPVEYOR_REPO_TAG_NAME) -- .\PhpManager)
            $commitMessages = @()
            foreach ($rawCommitMessage in $rawCommitMessages) {
              if (-Not($rawCommitMessage -imatch '^- \[minor\]')) {
                $commitMessages += $rawCommitMessage
              }
            }
            if ($commitMessages.Count -lt 1) {
              Write-Host 'No relevant commit messages found: empty release notes'
            } else {
              $releaseNotes = [string]::Join("`n", $commitMessages)
              Write-Host "Release notes:`n$releaseNotes"
            }
          }
        }
        Update-ModuleManifest -Path .\PhpManager\PhpManager.psd1 -ModuleVersion $newVersion -ReleaseNotes $releaseNotes
        Import-Module -Force .\PhpManager
        Publish-Module -Repository PSGallery -Path .\PhpManager -NuGetApiKey $Env:PsgKey -Force
      }
