branches:
  only:
    - master

version: "Build {build}"

skip_commits:
  files:
    - images/
    - src/
    - .gitignore
    - LICENSE
    - README.md

environment:
  PsgKey:
    secure: tlhLuUS6x8FcP159+X/EIBDlj9m+u5KCTTuqwzsiNHlPX6K4AolpaZcfAP4ClOdB

cache:
  - C:\downloads -> .appveyor.yml
  - '%ProgramFiles%\WindowsPowerShell\Modules\VcRedist -> .appveyor.yml'
  - '%ProgramFiles%\WindowsPowerShell\Modules\PSScriptAnalyzer -> .appveyor.yml'
  - '%ProgramFiles%\WindowsPowerShell\Modules\Pester -> .appveyor.yml'

build: off

install:
  - ps: .\test\setup.ps1

test_script:
  - ps: |
      $pesterResult = .\test\pester.ps1
      (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path -LiteralPath .\TestsResults.xml))
      If ($pesterResult.FailedCount -gt 0) {
        Throw "$($pesterResult.FailedCount) tests failed!"
      }

deploy_script:
  - ps: |
      If ($true -eq $Env:APPVEYOR_REPO_TAG -and $Env:APPVEYOR_REPO_TAG_NAME -match '^\d+\.\d+\.\d+$') {
        $newVersion = $Env:APPVEYOR_REPO_TAG_NAME + '.' + $Env:APPVEYOR_BUILD_NUMBER
        Write-Host "Publishing new version: $newVersion"
        $releaseNotes = ''
        $tags = @(& git tag --list --sort=-version:refname)
        If ($tags.Count -lt 2) {
          Write-Host 'Less than 2 tags found: empty release notes'
        } Else {
          $thisTagIndex = [array]::IndexOf($tags, $Env:APPVEYOR_REPO_TAG_NAME)
          If ($thisTagIndex -lt 0) {
            Write-Host 'Unable to find the index of the current tag: empty release notes'
          }
          $previousTag = ''
          For ($tagIndex = $thisTagIndex + 1; $tagIndex -lt $tags.Count; $tagIndex++) {
            If ($tags[$tagIndex] -match '^\d+\.\d+\.\d+$') {
              $previousTag = $tags[$tagIndex]
              break
            }
          }
          If ($previousTag -eq '') {
            Write-Host 'Unable to find the previously published tag: empty release notes'
          } Else {
            $rawCommitMessages = @(& git log --format='- %s' --no-merges --reverse ("$previousTag..." + $Env:APPVEYOR_REPO_TAG_NAME) -- .\PhpManager)
            $commitMessages = @()
            ForEach ($rawCommitMessage in $rawCommitMessages) {
              If (-Not($rawCommitMessage -imatch '^- \[minor\]')) {
                $commitMessages += $rawCommitMessage
              }
            }
            If ($commitMessages.Count -lt 1) {
              Write-Host 'No relevant commit messages found: empty release notes'
            } Else {
              $releaseNotes = [string]::Join("`n", $commitMessages)
              Write-Host "Release notes:`n$releaseNotes"
            }
          }
        }
        Update-ModuleManifest -Path .\PhpManager\PhpManager.psd1 -ModuleVersion $newVersion -ReleaseNotes $releaseNotes
        Import-Module -Force .\PhpManager
        Publish-Module -Repository PSGallery -Path .\PhpManager -NuGetApiKey $Env:PsgKey -Force
      }
